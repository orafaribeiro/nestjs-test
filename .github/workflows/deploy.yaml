name: Deploy to Kubernetes
on:
  push:
    branches:
      - master
permissions:
  id-token: write # This is required for requesting the JWT
  contents: read # This is required for actions/checkout
env:
  ECR_REPOSITORY: flask-app
  EKS_CLUSTER_NAME: my-api1
  AWS_REGION: us-east-2
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Teste
        run: echo ${{ github.event.head_commit.message }}

      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v1.7.0
        with:
          role-to-assume: arn:aws:iam::471112647960:role/GitHubAction-AssumeRoleWithAction #change to reflect your IAM roleâ€™s ARN
          role-session-name: GitHub_to_AWS_via_FederatedOIDC
          aws-region: us-east-2

      - name: Sts GetCallerIdentity
        run: aws sts get-caller-identity

      - name: Sts GetCallerIdentity
        run: kubectl describe configmap aws-auth -n kube-system

      # - name: Login to Amazon ECR
      #   id: login-ecr
      #   uses: aws-actions/amazon-ecr-login@v2

      # - name: Build, tag, and push docker image to Amazon ECR
      #   env:
      #     REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      #     REPOSITORY: my-api1
      #     IMAGE_TAG: ${{ github.sha }}
      #   run: |
      #     docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG -f ./app/Dockerfile "app"
      #     docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

      # - name: Decrypt large secret
      #   run: chmod +x ./decrypt_secret.sh

      # - name: Decrypt large secret
      #   run: ./decrypt_secret.sh
      #   env:
      #     KUBECONFIG_PASSPHRASE: ${{ secrets.KUBECONFIG_PASSPHRASE }}

      # - name: Test printing your secret (Remove this step in production)
      #   run: cat $HOME/secrets/kubeconfig

      # - name: Configure kubectl
      #   run: mkdir -p ~/.kube && mv $HOME/secrets/kubeconfig ~/.kube/config

      # - name: Get Kubeconfig content
      #   id: kubeconfig_content
      #   run: echo "kubeconfig=$(cat ~/.kube/config | tr -d " \t\n\r")" >> $GITHUB_OUTPUT

      # - name: Get Kubeconfig content 2
      #   run: echo ${{ steps.kubeconfig_content.outputs.kubeconfig }}

      # - name: Set up Kubectl
      #   uses: azure/k8s-set-context@v1
      #   with:
      #     kubeconfig: ${{ secrets.KUBECONFIG_PASSPHRASE }}

      - name: Update kube config
        run: aws eks update-kubeconfig --name $EKS_CLUSTER_NAME --region $AWS_REGION

      - name: Config View
        run: kubectl config view --minify

      - name: Deploy
        run: |
          kubectl config get-contexts

      - name: Deploy 2
        run: |
          kubectl get pods

      # - name: Deploy 2
      #   uses: swdotcom/update-and-apply-kubernetes-configs@v1
      #   with:
      #     k8-config-file-paths: app/k8s/deployment.yaml
      #     replacement-method: list
      #     env-replacement-list: |
      #       IMAGE_TAG
      #   env:
      #     #IMAGE_TAG: ${{ github.event.head_commit.message }}
      #     IMAGE_TAG: 751598201745a8ac3dba884ad734e85dca34fb12

      # - name: Deploy 2
      #   run: |
      #     kubectl apply -f ./app/k8s/deployment.yaml
      #   env:
      #     #IMAGE_TAG: ${{ github.event.head_commit.message }}
      #     IMAGE_TAG: ${{ github.sha }}

      # - name: Set up QEMU
      #   uses: docker/setup-qemu-action@v3

      # - name: Set up Docker
      #   uses: docker/setup-buildx-action@v3

      # - name: Login to Docker Hub
      #   uses: docker/login-action@v3
      #   with:
      #     username: ${{ secrets.DOCKER_USERNAME }}
      #     password: ${{ secrets.DOCKER_PASSWORD }}

      # - name: Build Docker image
      #   uses: docker/build-push-action@v5
      #   with:
      #     context: .
      #     push: true
      #     tags: b2mplatform/b2m-track-processes:${{ github.event.head_commit.message }}

      # - name: Configure kubectl
      #   run: mkdir -p ~/.kube && mv k8s/kubeconfig.yaml ~/.kube/config

      # - uses: swdotcom/update-and-apply-kubernetes-configs@v1
      #   with:
      #     k8-config-file-paths: k8s/deployment.yaml
      #     replacement-method: list
      #     env-replacement-list: |
      #       IMAGE_TAG
      #   env:
      #     IMAGE_TAG: ${{ github.event.head_commit.message }}
